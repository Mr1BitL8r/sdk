!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
.DEFAULT_GOAL	Makefile	/^.DEFAULT_GOAL := buildtarget$/;"	m
.DEFAULT_GOAL	Makefile	/^.DEFAULT_GOAL := help$/;"	m
.DEFAULT_GOAL	buildsystem/main.mk	/^.DEFAULT_GOAL := $(BUILDDIR)\/$(TARGET)$(TARGET_TYPE)$/;"	m
.DEFAULT_GOAL	buildsystem/target.mk	/^.DEFAULT_GOAL := $(CONFIG)$/;"	m
.DEFAULT_GOAL	buildsystem/target.mk	/^.DEFAULT_GOAL := all$/;"	m
ANALYZE_FLAGS	buildsystem/main.mk	/^ANALYZE_FLAGS :=	-analyzer-viz-egraph-graphviz \\$/;"	m
APPCMD	include/cmds.h	/^#define APPCMD(/;"	d
APPCMD_OPT	include/cmds.h	/^#define APPCMD_OPT(/;"	d
APPCMD_OPT	src/cmds/version.c	/^APPCMD_OPT(version, &version, "print the version", "usage: version", NULL,$/;"	v
APPDATA	src/app.h	/^#define APPDATA	/;"	d
APPMGR	src/AppMgr.h	/^#define APPMGR	/;"	d
ARRAY_SIZE	include/prjutil.h	/^#define ARRAY_SIZE(/;"	d
ASFLAGS	buildsystem/main.mk	/^ASFLAGS :=$/;"	m
BUILDDIR	Makefile	/^export BUILDDIR := $(BUILDDIR_ROOT)\/$(MACHINE)\/$(CCNAME)$/;"	m
BUILDDIR	buildsystem/main.mk	/^BUILDDIR := $(BUILDDIR)\/$(TARGET)\/$(CONFIG)$/;"	m
BUILDDIR_ROOT	Makefile	/^export BUILDDIR_ROOT := buildresults$/;"	m
CCNAME	Makefile	/^export CCNAME := $(call USCORESUB,$(notdir $(realpath $(shell which $(CC)))))$/;"	m
CFLAGS	buildsystem/main.mk	/^CFLAGS := -Wall -Werror -m64 -mtune=native$/;"	m
CMDHANDLER	include/cmds.h	/^#define CMDHANDLER(/;"	d
CMDHANDLER	lib/cmds.c	/^CMDHANDLER(help)$/;"	f
CMDHANDLER	lib/cmds_script.c	/^CMDHANDLER(script_handler)$/;"	f
CMDHANDLER	lib/cmds_shell.c	/^CMDHANDLER(shell_handler)$/;"	f
CMDHANDLER	lib/logging.c	/^CMDHANDLER(setloglevel)$/;"	f
CMDHANDLER	lib/net/connection.c	/^CMDHANDLER(connection_test)$/;"	f
CMDHANDLER	lib/net/listen.c	/^CMDHANDLER(listener_test)$/;"	f
CMDHANDLER	lib/threadpool.c	/^CMDHANDLER(threadpool_test)$/;"	f
CMDHANDLER	src/cmds/version.c	/^CMDHANDLER(version)$/;"	f
CMDS_MAX_ARGUMENTS	lib/cmds.c	/^#define CMDS_MAX_ARGUMENTS	/;"	d	file:
CMDS_SCRIPT_LINE_LENGTH	lib/cmds_script.c	/^#define CMDS_SCRIPT_LINE_LENGTH	/;"	d	file:
CMDS_SHELL_PROMPT	lib/cmds_shell.c	/^#define CMDS_SHELL_PROMPT	/;"	d	file:
CMD_OPT	include/cmds.h	/^#define CMD_OPT(/;"	d
COLOR_BL	lib/cmds_shell.c	/^#define COLOR_BL /;"	d	file:
COLOR_BR	lib/cmds_shell.c	/^#define COLOR_BR /;"	d	file:
COLOR_CY	lib/cmds_shell.c	/^#define COLOR_CY /;"	d	file:
COLOR_GR	lib/cmds_shell.c	/^#define COLOR_GR /;"	d	file:
COLOR_MG	lib/cmds_shell.c	/^#define COLOR_MG /;"	d	file:
COLOR_NO	lib/cmds_shell.c	/^#define COLOR_NO	/;"	d	file:
COLOR_RD	lib/cmds_shell.c	/^#define COLOR_RD /;"	d	file:
COLOR_YL	lib/cmds_shell.c	/^#define COLOR_YL /;"	d	file:
CONFIGS	targets/cocoa.mk	/^CONFIGS := debug release$/;"	m
CONFIGS	targets/flirc_util.mk	/^CONFIGS := debug release$/;"	m
CONVERTEXT	buildsystem/func.mk	/^CONVERTEXT = $(addsuffix .$(strip $1), $(basename $2))$/;"	m
CPPFLAGS	buildsystem/main.mk	/^CPPFLAGS := -Iinclude -Isrc -I..\/libs\/$/;"	m
CXXFLAGS	buildsystem/main.mk	/^CXXFLAGS = $(CFLAGS)$/;"	m
DEFAULT_LOGLEVEL	include/logging.h	/^#define DEFAULT_LOGLEVEL	/;"	d
DICT_HASH_SIZE	include/dict.h	/^#define DICT_HASH_SIZE	/;"	d
END_CMD_OPTS	include/cmds.h	/^#define END_CMD_OPTS	/;"	d
EXTRACT_CONFIG	buildsystem/func.mk	/^EXTRACT_CONFIG = $(patsubst .%,%,$(suffix $(1)))$/;"	m
EXTRACT_TARGET	buildsystem/func.mk	/^EXTRACT_TARGET = $(basename $(1))$/;"	m
FRAMEWORKS	targets/cocoa.mk	/^FRAMEWORKS := Foundation CoreFoundation$/;"	m
GOAL	buildsystem/target.mk	/^GOAL := install$/;"	m
GOAL	buildsystem/target.mk	/^GOAL :=$/;"	m
HEXDUMP_WIDTH	include/hexdump.h	/^#define HEXDUMP_WIDTH	/;"	d
HLIST_HEAD	include/ll.h	/^#define HLIST_HEAD(/;"	d
HLIST_HEAD_INIT	include/ll.h	/^#define HLIST_HEAD_INIT	/;"	d
HOSTOS	Makefile	/^export HOSTOS := $(call TOUPPER,$(call USCORESUB,$(shell uname -s)))$/;"	m
INIT_HLIST_HEAD	include/ll.h	/^#define INIT_HLIST_HEAD(/;"	d
INIT_HLIST_NODE	include/ll.h	/^static inline void INIT_HLIST_NODE(struct hlist_node *h)$/;"	f
INIT_LIST_HEAD	include/ll.h	/^static inline void INIT_LIST_HEAD(struct list_head *head)$/;"	f
INSTALL_SCRIPT	targets/cocoa.mk	/^INSTALL_SCRIPT = targets\/install$/;"	m
INSTALL_SCRIPT	targets/flirc_util.mk	/^INSTALL_SCRIPT = targets\/install$/;"	m
I__APP_H__	src/app.h	/^	#define I__APP_H__$/;"	d
I__CMDS_H__	include/cmds.h	/^	#define I__CMDS_H__$/;"	d
I__DEVICE_CHOOSER_H__	include/serial/device_chooser.h	/^	#define I__DEVICE_CHOOSER_H__$/;"	d
I__DICT_H__	include/dict.h	/^	#define I__DICT_H__$/;"	d
I__GETLINE_H__	include/getline.h	/^	#define I__GETLINE_H__$/;"	d
I__HEXDUMP_H__	include/hexdump.h	/^	#define I__HEXDUMP_H__$/;"	d
I__LL_H__	include/ll.h	/^	#define I__LL_H__$/;"	d
I__LOGGING_H__	include/logging.h	/^	#define I__LOGGING_H__$/;"	d
I__MATRIX_H__	include/math/matrix.h	/^	#define I__MATRIX_H__$/;"	d
I__NETCONNECTION_H__	include/net/connection.h	/^	#define I__NETCONNECTION_H__$/;"	d
I__NETLISTEN_H__	include/net/listen.h	/^	#define I__NETLISTEN_H__$/;"	d
I__NETUTIL_H__	include/net/util.h	/^	#define I__NETUTIL_H__$/;"	d
I__PKV_H__	include/net/pkv.h	/^	#define I__PKV_H__$/;"	d
I__PRJUTIL_H__	include/prjutil.h	/^	#define I__PRJUTIL_H__$/;"	d
I__SERIAL_H__	include/serial/serial.h	/^	#define I__SERIAL_H__$/;"	d
I__THREADPOOL_H__	include/threadpool.h	/^	#define I__THREADPOOL_H__$/;"	d
I__TIMELIB_H__	include/timelib.h	/^	#define I__TIMELIB_H__$/;"	d
LDFLAGS	buildsystem/main.mk	/^LDFLAGS :=$/;"	m
LDLIBS	buildsystem/main.mk	/^LDLIBS := $(addprefix -l,$(LIBRARIES))$/;"	m
LIBRARIES	targets/cocoa.mk	/^LIBRARIES := readline$/;"	m
LIBRARIES	targets/flirc_util.mk	/^LIBRARIES := readline flirc usb-1.0 hidapi$/;"	m
LIST_HEAD	include/ll.h	/^#define LIST_HEAD(/;"	d
LIST_HEAD_INIT	include/ll.h	/^#define LIST_HEAD_INIT(/;"	d
LOGLEVEL_DEBUG	include/logging.h	/^#define LOGLEVEL_DEBUG	/;"	d
LOGLEVEL_ERROR	include/logging.h	/^#define LOGLEVEL_ERROR	/;"	d
LOGLEVEL_INFO	include/logging.h	/^#define LOGLEVEL_INFO	/;"	d
LOGLEVEL_NONE	include/logging.h	/^#define LOGLEVEL_NONE	/;"	d
LOGLEVEL_VERBOSE	include/logging.h	/^#define LOGLEVEL_VERBOSE	/;"	d
LOGLEVEL_WARNING	include/logging.h	/^#define LOGLEVEL_WARNING	/;"	d
LSEARCH	buildsystem/main.mk	/^LSEARCH := -L..\/libs\/$(MACHINE)\/$/;"	m
MACHINE	Makefile	/^export MACHINE := $(call USCORESUB,$(shell uname -sm))$/;"	m
MATRIX_VAL	include/math/matrix.h	/^#define MATRIX_VAL(/;"	d
MAXPATHLEN	include/serial/serial.h	/^#define	MAXPATHLEN	/;"	d
MAX_LOGLEVEL	include/logging.h	/^#define MAX_LOGLEVEL	/;"	d
NET_LISTEN_BACKLOG	lib/net/listen.c	/^#define NET_LISTEN_BACKLOG	/;"	d	file:
NULL	include/prjutil.h	/^#define NULL /;"	d
OPTIONS	buildsystem/main.mk	/^OPTIONS :=$/;"	m
OUTPUTINFO	buildsystem/func.mk	/^OUTPUTINFO = @echo "[$1],$2" | \\$/;"	m
PKV_VERSION	include/net/pkv.h	/^#define PKV_VERSION	/;"	d
PRINTLIST	buildsystem/func.mk	/^PRINTLIST = @echo $1 | awk '{for(ii=1;ii<=NF;ii++){print "$2" $$ii;}}'$/;"	m
Q	Makefile	/^export Q := @$/;"	m
Q	Makefile	/^export Q :=$/;"	m
RMTRAILINGSLASH	buildsystem/func.mk	/^RMTRAILINGSLASH = $(patsubst %\/,%,$1)$/;"	m
SCMBRANCH	buildsystem/git.mk	/^SCMBRANCH := $(shell (git branch 2> \/dev\/null || echo '* UNKNOWN') | \\$/;"	m
SCMVERSION	buildsystem/git.mk	/^SCMVERSION := $(shell git describe --tags --dirty=+ --always 2>\/dev\/null || \\$/;"	m
SOCKADDR_ADDR_STR_LEN	include/net/util.h	/^#define SOCKADDR_ADDR_STR_LEN	/;"	d
SOURCES	targets/cocoa.mk	/^SOURCES :=	src\/entry.m \\$/;"	m
SOURCES	targets/flirc_util.mk	/^SOURCES :=	src\/main.c \\$/;"	m
START_CMD_OPTS	include/cmds.h	/^#define START_CMD_OPTS(/;"	d
TARGET	buildsystem/target.mk	/^TARGET ?= $(basename $(notdir $(TARGETMK)))$/;"	m
TARGETDIR	Makefile	/^TARGETDIR := targets$/;"	m
TARGETS	Makefile	/^TARGETS := $(basename $(notdir $(wildcard $(TARGETDIR)\/*.mk)))$/;"	m
TARGET_TYPE	buildsystem/main.mk	/^TARGET_TYPE := $(strip $(TARGET_TYPE))$/;"	m
THISCMD	include/cmds.h	/^#define THISCMD /;"	d
TOUPPER	buildsystem/func.mk	/^TOUPPER = $(shell echo $1 | \\$/;"	m
USCORESUB	buildsystem/func.mk	/^USCORESUB = $(shell echo $1 | sed 'y; -.\/;____;')$/;"	m
VERBOSE	Makefile	/^export VERBOSE := 0$/;"	m
VERBOSE	Makefile	/^export VERBOSE := 1$/;"	m
_APPCMD	include/cmds.h	/^#define _APPCMD(/;"	d
__constructor	include/prjutil.h	/^#define __constructor	/;"	d
__hlist_del	include/ll.h	/^static inline void __hlist_del(struct hlist_node *n)$/;"	f
__list_add	include/ll.h	/^static inline void __list_add(struct list_head *n, struct list_head *prev,$/;"	f
__list_cut_position	include/ll.h	/^static inline void __list_cut_position(struct list_head *list,$/;"	f
__list_del	include/ll.h	/^static inline void __list_del(struct list_head *prev, struct list_head *next)$/;"	f
__log	lib/logging.c	/^void __log(int level, const char *fmt, ...)$/;"	f
__packed	include/dict.h	/^} __packed;$/;"	v	typeref:struct:kvpair
__packed	include/net/pkv.h	/^} __packed;$/;"	v	typeref:struct:pkv_header
__packed	include/prjutil.h	/^#define __packed	/;"	d
__printf_check	include/prjutil.h	/^#define __printf_check(/;"	d
__unused	include/prjutil.h	/^#define __unused	/;"	d
_init_logging	lib/logging.c	/^static void __constructor _init_logging(void)$/;"	f	file:
_register_cmd	lib/cmds.c	/^void _register_cmd(struct cmd_mgr *rcmd)$/;"	f
add_bsd_header_c_file	bin/addlicense	/^add_bsd_header_c_file() {$/;"	f
add_bsd_header_py_file	bin/addlicense	/^add_bsd_header_py_file() {$/;"	f
add_kvpair	lib/dict.c	/^struct kvpair_mgr *add_kvpair(struct dictionary *dict, struct kvpair *kvp,$/;"	f
add_matrix_dt	lib/math/matrix.c	/^matrix_dt *add_matrix_dt(const matrix_dt *A, const matrix_dt *B)$/;"	f
addopt	lib/cmds.c	/^static inline void addopt(const struct cmd_opt *opt, struct dictionary *optdict,$/;"	f	file:
addr	include/net/connection.h	/^	struct sockaddr addr;$/;"	m	struct:net_connection	typeref:struct:net_connection::sockaddr
addr	include/net/listen.h	/^	struct sockaddr addr;$/;"	m	struct:net_listener	typeref:struct:net_listener::sockaddr
addr_len	include/net/connection.h	/^	socklen_t addr_len;$/;"	m	struct:net_connection
addr_len	include/net/listen.h	/^	socklen_t addr_len;$/;"	m	struct:net_listener
appdata_priv	src/app.h	/^struct appdata_priv {$/;"	s
apppriv	src/main.c	/^static struct appdata_priv apppriv;$/;"	v	typeref:struct:appdata_priv	file:
array_inversions	lib/math/matrix.c	/^static unsigned int array_inversions(uint32_t *a, size_t count)$/;"	f	file:
buf	include/net/connection.h	/^		void *buf;$/;"	m	struct:net_connection::__anon1
checksum	include/net/pkv.h	/^	uint32_t checksum;$/;"	m	struct:pkv_header
cmd	include/cmds.h	/^	const struct cmd *cmd;$/;"	m	struct:cmd_mgr	typeref:struct:cmd_mgr::cmd
cmd	include/cmds.h	/^struct cmd {$/;"	s
cmd_getopt	lib/cmds.c	/^static struct dictionary *cmd_getopt(const struct cmd *cmd_entry,$/;"	f	file:
cmd_mgr	include/cmds.h	/^struct cmd_mgr {$/;"	s
cmd_opt	include/cmds.h	/^struct cmd_opt {$/;"	s
cofactor_dt	lib/math/matrix.c	/^double cofactor_dt(const matrix_dt *A, uint32_t i, uint32_t j)$/;"	f
cofactor_matrix_dt	lib/math/matrix.c	/^matrix_dt *cofactor_matrix_dt(const matrix_dt *A)$/;"	f
cols	include/math/matrix.h	/^	uint32_t cols;$/;"	m	struct:matrix_dt
compute_hash	lib/dict.c	/^static inline int compute_hash(const char *key)$/;"	f	file:
config	include/threadpool.h	/^	} config;$/;"	m	struct:threadpool	typeref:struct:threadpool::__anon2
connection_handler_thread	lib/net/connection.c	/^static struct list_head *connection_handler_thread(struct poolthread *thread,$/;"	f	file:
connection_node	include/net/connection.h	/^	struct list_head connection_node;$/;"	m	struct:net_connection	typeref:struct:net_connection::list_head
connections	include/net/connection.h	/^	struct list_head connections;$/;"	m	struct:net_connection_handler	typeref:struct:net_connection_handler::list_head
connections_lock	include/net/connection.h	/^	pthread_mutex_t connections_lock;$/;"	m	struct:net_connection_handler
container_of	include/prjutil.h	/^#define container_of(/;"	d
copy_matrix_dt	lib/math/matrix.c	/^matrix_dt *copy_matrix_dt(const matrix_dt *A)$/;"	f
create_serial_iterator	lib/serial/serial.c	/^static kern_return_t create_serial_iterator(io_iterator_t *serial_iterator)$/;"	f	file:
ctrl_change	include/threadpool.h	/^	pthread_cond_t ctrl_change;$/;"	m	struct:threadpool
ctrl_func	include/threadpool.h	/^	void (*ctrl_func)(struct ctrlthread *thread);$/;"	m	struct:ctrlthread
ctrl_lock	include/threadpool.h	/^	pthread_mutex_t ctrl_lock;$/;"	m	struct:threadpool
ctrl_node	include/threadpool.h	/^	struct list_head ctrl_node;$/;"	m	struct:ctrlthread	typeref:struct:ctrlthread::list_head
ctrl_threads	include/threadpool.h	/^	struct list_head ctrl_threads;$/;"	m	struct:threadpool	typeref:struct:threadpool::list_head
ctrlthread	include/threadpool.h	/^struct ctrlthread {$/;"	s
ctrlthread_thread	lib/threadpool.c	/^static void *ctrlthread_thread(struct ctrlthread *t)$/;"	f	file:
cx_lock	include/net/connection.h	/^	pthread_mutex_t cx_lock;$/;"	m	struct:net_connection
default_cmds	src/main.c	/^const char *default_cmds[] = {$/;"	v
delete_dict	lib/dict.c	/^void delete_dict(struct dictionary *dict)$/;"	f
delete_kvpair	lib/dict.c	/^void delete_kvpair(struct kvpair *kvp)$/;"	f
delete_kvpair_mgr	lib/dict.c	/^void delete_kvpair_mgr(struct kvpair_mgr *kvm)$/;"	f
delete_pkv	lib/net/pkv.c	/^void delete_pkv(struct pkv *p)$/;"	f
description	include/cmds.h	/^	const char *description;$/;"	m	struct:cmd_opt
determinant_dt	lib/math/matrix.c	/^double determinant_dt(const matrix_dt *A)$/;"	f
dict_add_key	lib/dict.c	/^void *dict_add_key(struct dictionary *dict, const char *key,$/;"	f
dict_add_string	include/dict.h	/^static inline char *dict_add_string(struct dictionary *dict, const char *key,$/;"	f
dict_deserialize	lib/dict.c	/^struct dictionary *dict_deserialize(void *serialized_buf, size_t size)$/;"	f
dict_for_buf	lib/dict.c	/^struct dictionary *dict_for_buf(void *serialized_buf, size_t size,$/;"	f
dict_has_key	lib/dict.c	/^int dict_has_key(struct dictionary *dict, const char *key)$/;"	f
dict_remove_key	lib/dict.c	/^void dict_remove_key(struct dictionary *dict, const char *key)$/;"	f
dict_serialize	lib/dict.c	/^void *dict_serialize(struct dictionary *dict, size_t *size)$/;"	f
dict_serialize_into	lib/dict.c	/^ssize_t dict_serialize_into(struct dictionary *dict, void *buf)$/;"	f
dict_serialized_size	lib/dict.c	/^size_t dict_serialized_size(struct dictionary *dict)$/;"	f
dict_str_for_key	include/dict.h	/^static inline char *dict_str_for_key(struct dictionary *dict, const char *key)$/;"	f
dict_value_for_key	lib/dict.c	/^void *dict_value_for_key(struct dictionary *dict, const char *key, size_t *size)$/;"	f
dictionary	include/dict.h	/^struct dictionary {$/;"	s
disconnect	include/net/connection.h	/^	void (*disconnect)(struct net_connection *c);$/;"	m	struct:net_connection
entries	include/dict.h	/^	unsigned int entries;$/;"	m	struct:dictionary
fd	include/serial/serial.h	/^	int fd;$/;"	m	struct:serial_device
fgetline	lib/getline.c	/^ssize_t fgetline(FILE *fp, char *buf, size_t bufsz)$/;"	f
find_kvpair	lib/dict.c	/^struct kvpair_mgr *find_kvpair(struct dictionary *dict, const char *key)$/;"	f
find_kvpair_with_hash	lib/dict.c	/^static struct kvpair_mgr *find_kvpair_with_hash(struct dictionary *dict,$/;"	f	file:
findlongopt	lib/cmds.c	/^static const struct cmd_opt *findlongopt(const struct cmd *cmd_entry,$/;"	f	file:
findshortopt	lib/cmds.c	/^static const struct cmd_opt *findshortopt(const struct cmd *cmd_entry,$/;"	f	file:
first	include/ll.h	/^	struct hlist_node *first;$/;"	m	struct:hlist_head	typeref:struct:hlist_head::hlist_node
fl_init	src/prepost.c	/^int fl_init(struct appdata_priv *priv)$/;"	f
free	include/dict.h	/^	void (*free)(struct kvpair *);$/;"	m	struct:kvpair_mgr
free_matrix_dt	lib/math/matrix.c	/^void free_matrix_dt(matrix_dt *m)$/;"	f
get_registry_string	lib/serial/serial.c	/^static char *get_registry_string(io_object_t sObj, const char *prop_name)$/;"	f	file:
handle_longopt	lib/cmds.c	/^static void handle_longopt(const struct cmd *cmd_entry, struct dictionary *od,$/;"	f	file:
handle_shortopt	lib/cmds.c	/^static void handle_shortopt(const struct cmd *cmd_entry, struct dictionary *od,$/;"	f	file:
handled_lock	include/net/connection.h	/^	pthread_mutex_t handled_lock;$/;"	m	struct:net_connection
handler	include/cmds.h	/^	int (*handler)(int argc, const char **argv, const struct cmd *cmd,$/;"	m	struct:cmd
handler	include/net/listen.h	/^	struct net_connection_handler *handler;$/;"	m	struct:net_listener	typeref:struct:net_listener::net_connection_handler
help	include/cmds.h	/^	const char *help;$/;"	m	struct:cmd
hexdump	lib/hexdump.c	/^void hexdump(FILE *outf, void *buf, size_t size)$/;"	f
hexdump_line	lib/hexdump.c	/^static void hexdump_line(FILE *outf, void *line, size_t size, size_t width)$/;"	f	file:
hlist_add_after	include/ll.h	/^static inline void hlist_add_after(struct hlist_node *n,$/;"	f
hlist_add_before	include/ll.h	/^static inline void hlist_add_before(struct hlist_node *n,$/;"	f
hlist_add_head	include/ll.h	/^static inline void hlist_add_head(struct hlist_node *n, struct hlist_head *h)$/;"	f
hlist_del	include/ll.h	/^static inline void hlist_del(struct hlist_node *n)$/;"	f
hlist_empty	include/ll.h	/^static inline int hlist_empty(const struct hlist_head *h)$/;"	f
hlist_entry	include/ll.h	/^#define hlist_entry(/;"	d
hlist_for_each	include/ll.h	/^#define hlist_for_each(/;"	d
hlist_for_each_entry	include/ll.h	/^#define hlist_for_each_entry(/;"	d
hlist_for_each_entry_safe	include/ll.h	/^#define hlist_for_each_entry_safe(/;"	d
hlist_for_each_safe	include/ll.h	/^#define hlist_for_each_safe(/;"	d
hlist_head	include/ll.h	/^struct hlist_head {$/;"	s
hlist_node	include/ll.h	/^struct hlist_node {$/;"	s
hlist_unhashed	include/ll.h	/^static inline int hlist_unhashed(const struct hlist_node *h)$/;"	f
idle_secs	include/threadpool.h	/^		unsigned int idle_secs;$/;"	m	struct:threadpool::__anon2
idle_start	include/threadpool.h	/^	time_t idle_start;$/;"	m	struct:poolthread
idle_threads	include/threadpool.h	/^	volatile unsigned int idle_threads;$/;"	m	struct:threadpool
inverse_matrix_dt	lib/math/matrix.c	/^matrix_dt *inverse_matrix_dt(const matrix_dt *A)$/;"	f
kv	include/dict.h	/^	uint8_t kv[];$/;"	m	struct:kvpair
kvp	include/dict.h	/^	struct kvpair *kvp;$/;"	m	struct:kvpair_mgr	typeref:struct:kvpair_mgr::kvpair
kvpair	include/dict.h	/^struct kvpair {$/;"	s
kvpair_key	include/dict.h	/^static inline const char *kvpair_key(struct kvpair *kvp)$/;"	f
kvpair_mgr	include/dict.h	/^struct kvpair_mgr {$/;"	s
kvpair_value	include/dict.h	/^static inline void *kvpair_value(struct kvpair *kvp, size_t *size)$/;"	f
kvsize	include/dict.h	/^	uint32_t kvsize;$/;"	m	struct:kvpair
kvtable	include/dict.h	/^	struct hlist_head kvtable[DICT_HASH_SIZE];$/;"	m	struct:dictionary	typeref:struct:dictionary::hlist_head
length	include/net/pkv.h	/^	uint32_t length;$/;"	m	struct:pkv_header
list_add	include/ll.h	/^static inline void list_add(struct list_head *n, struct list_head *head)$/;"	f
list_add_tail	include/ll.h	/^static inline void list_add_tail(struct list_head *n, struct list_head *head)$/;"	f
list_cut_position	include/ll.h	/^static inline void list_cut_position(struct list_head *list,$/;"	f
list_del	include/ll.h	/^static inline void list_del(struct list_head *entry)$/;"	f
list_del_init	include/ll.h	/^static inline void list_del_init(struct list_head *entry)$/;"	f
list_empty	include/ll.h	/^static inline int list_empty(const struct list_head *head)$/;"	f
list_entry	include/ll.h	/^#define list_entry(/;"	d
list_first_entry	include/ll.h	/^#define list_first_entry(/;"	d
list_for_each	include/ll.h	/^#define list_for_each(/;"	d
list_for_each_entry	include/ll.h	/^#define list_for_each_entry(/;"	d
list_for_each_entry_rev	include/ll.h	/^#define list_for_each_entry_rev(/;"	d
list_for_each_entry_safe	include/ll.h	/^#define list_for_each_entry_safe(/;"	d
list_for_each_entry_safe_rev	include/ll.h	/^#define list_for_each_entry_safe_rev(/;"	d
list_for_each_safe	include/ll.h	/^#define list_for_each_safe(/;"	d
list_head	include/ll.h	/^struct list_head {$/;"	s
list_is_last	include/ll.h	/^static inline int list_is_last(const struct list_head *entry,$/;"	f
list_is_singular	include/ll.h	/^static inline int list_is_singular(const struct list_head *head)$/;"	f
list_move	include/ll.h	/^static inline void list_move(struct list_head *entry,$/;"	f
list_move_tail	include/ll.h	/^static inline void list_move_tail(struct list_head *entry,$/;"	f
list_replace	include/ll.h	/^static inline void list_replace(struct list_head *old, struct list_head *n)$/;"	f
list_replace_init	include/ll.h	/^static inline void list_replace_init(struct list_head *old, struct list_head *n)$/;"	f
list_swap	include/ll.h	/^static inline void list_swap(struct list_head *n1, struct list_head *n2)$/;"	f
listener_accept_connection	lib/net/listen.c	/^static void listener_accept_connection(struct net_listener *l)$/;"	f	file:
listener_lock	include/net/listen.h	/^	pthread_mutex_t listener_lock;$/;"	m	struct:net_listener
listener_thread	lib/net/listen.c	/^static void listener_thread(struct ctrlthread *thread)$/;"	f	file:
lock	include/net/connection.h	/^		pthread_mutex_t lock;$/;"	m	struct:net_connection::__anon1
logdebug	include/logging.h	/^#define logdebug(/;"	d
logerror	include/logging.h	/^#define logerror(/;"	d
logfds	lib/logging.c	/^FILE *logfds[MAX_LOGLEVEL + 1];$/;"	v
loginfo	include/logging.h	/^#define loginfo(/;"	d
loglevel	lib/logging.c	/^static int loglevel = min_of(DEFAULT_LOGLEVEL, MAX_LOGLEVEL);$/;"	v	file:
logverbose	include/logging.h	/^#define logverbose(/;"	d
logwarn	include/logging.h	/^#define logwarn(/;"	d
longopt	include/cmds.h	/^	const char *longopt;	\/* NULL for none *\/$/;"	m	struct:cmd_opt
lookup_cmd	lib/cmds.c	/^static const struct cmd *lookup_cmd(const char *name,$/;"	f	file:
magic	include/net/pkv.h	/^	uint8_t magic[3];$/;"	m	struct:pkv_header
main	src/main.c	/^int main(int argc, const char * argv[])$/;"	f
matrix_dt	include/math/matrix.h	/^typedef struct matrix_dt {$/;"	s
matrix_dt	include/math/matrix.h	/^} matrix_dt;$/;"	t	typeref:struct:matrix_dt
max_of	include/prjutil.h	/^#define max_of(/;"	d
max_threads	include/threadpool.h	/^		unsigned int max_threads;$/;"	m	struct:threadpool::__anon2
min_of	include/prjutil.h	/^#define min_of(/;"	d
mult_matrix_dt	lib/math/matrix.c	/^matrix_dt *mult_matrix_dt(const matrix_dt *A, const matrix_dt *B)$/;"	f
name	include/cmds.h	/^	const char *name;	\/* Name of opt. This will be dictionary key. *\/$/;"	m	struct:cmd_opt
name	include/cmds.h	/^	const char *name;$/;"	m	struct:cmd
net_close_connection	lib/net/connection.c	/^void net_close_connection(struct net_connection *c)$/;"	f
net_close_handled_connection	lib/net/connection.c	/^void net_close_handled_connection(struct net_connection_handler *h,$/;"	f
net_close_listener	lib/net/listen.c	/^void net_close_listener(struct net_listener *l)$/;"	f
net_connect_connection	lib/net/connection.c	/^int net_connect_connection(struct net_connection *c)$/;"	f
net_connection	include/net/connection.h	/^struct net_connection {$/;"	s
net_connection_handler	include/net/connection.h	/^struct net_connection_handler {$/;"	s
net_connection_handler_init	lib/net/connection.c	/^int net_connection_handler_init(struct net_connection_handler *h)$/;"	f
net_connection_handler_shutdown	lib/net/connection.c	/^void net_connection_handler_shutdown(struct net_connection_handler *h)$/;"	f
net_deinit_connection	lib/net/connection.c	/^void net_deinit_connection(struct net_connection *c)$/;"	f
net_deinit_listener	lib/net/listen.c	/^void net_deinit_listener(struct net_listener *l)$/;"	f
net_handle_connection	lib/net/connection.c	/^void net_handle_connection(struct net_connection_handler *h,$/;"	f
net_init_connection	lib/net/connection.c	/^int net_init_connection(struct net_connection *c, size_t rx_buf_sz)$/;"	f
net_init_listener	lib/net/listen.c	/^int net_init_listener(struct net_listener *l,$/;"	f
net_listener	include/net/listen.h	/^struct net_listener {$/;"	s
net_open_connection	lib/net/connection.c	/^int net_open_connection(struct net_connection *c)$/;"	f
net_open_listener_afinet	lib/net/listen.c	/^int net_open_listener_afinet(struct net_listener *l, uint16_t port)$/;"	f
net_start_listener	lib/net/listen.c	/^int net_start_listener(struct net_listener *l)$/;"	f
net_stop_listener	lib/net/listen.c	/^void net_stop_listener(struct net_listener *l)$/;"	f
net_unhandle_connection	lib/net/connection.c	/^void net_unhandle_connection(struct net_connection_handler *h,$/;"	f
new_client	include/net/listen.h	/^	void (*new_client)(struct net_listener *, struct net_connection *);$/;"	m	struct:net_listener
new_client_connection	lib/net/listen.c	/^static struct net_connection *new_client_connection(struct net_listener *l)$/;"	f	file:
new_cx	include/net/listen.h	/^	struct net_connection *(*new_cx)(struct net_listener *);$/;"	m	struct:net_listener	typeref:struct:net_listener::new_cx
new_dict	lib/dict.c	/^struct dictionary *new_dict(void)$/;"	f
new_kvpair	lib/dict.c	/^struct kvpair *new_kvpair(const char *key, const void *value, size_t size)$/;"	f
new_kvpair_mgr	lib/dict.c	/^struct kvpair_mgr *new_kvpair_mgr(struct kvpair *kvp,$/;"	f
new_matrix_dt	lib/math/matrix.c	/^matrix_dt *new_matrix_dt(uint32_t rows, uint32_t cols)$/;"	f
new_pkv	lib/net/pkv.c	/^struct pkv *new_pkv(uint32_t type)$/;"	f
next	include/ll.h	/^	struct hlist_node *next, **pprev;$/;"	m	struct:hlist_node	typeref:struct:hlist_node::hlist_node
next	include/ll.h	/^	struct list_head *next, *prev;$/;"	m	struct:list_head	typeref:struct:list_head::list_head
node	include/cmds.h	/^	struct list_head node;$/;"	m	struct:cmd_mgr	typeref:struct:cmd_mgr::list_head
node	include/dict.h	/^	struct hlist_node node;$/;"	m	struct:kvpair_mgr	typeref:struct:kvpair_mgr::hlist_node
node	lib/threadpool.c	/^	struct list_head node;$/;"	m	struct:test_work_data	typeref:struct:test_work_data::list_head	file:
offsetof	include/prjutil.h	/^#define offsetof(/;"	d
options	include/cmds.h	/^	const struct cmd_opt *options;$/;"	m	struct:cmd	typeref:struct:cmd::cmd_opt
payload	include/net/pkv.h	/^	struct dictionary *payload;$/;"	m	struct:pkv	typeref:struct:pkv::dictionary
payload	include/net/pkv.h	/^	uint8_t payload[];$/;"	m	struct:pkv_header
pcmderr	include/cmds.h	/^#define pcmderr(/;"	d
permute_array	lib/math/matrix.c	/^static int permute_array(uint32_t *a, size_t count)$/;"	f	file:
pkt	include/net/pkv.h	/^	struct pkv_header *pkt;$/;"	m	struct:pkv	typeref:struct:pkv::pkv_header
pkt_size	include/net/pkv.h	/^	size_t pkt_size;$/;"	m	struct:pkv
pkv	include/net/pkv.h	/^struct pkv {$/;"	s
pkv_calc_checksum	lib/net/pkv.c	/^static inline uint32_t pkv_calc_checksum(struct pkv_header *pkt)$/;"	f	file:
pkv_deserialize	lib/net/pkv.c	/^int pkv_deserialize(struct pkv *p)$/;"	f
pkv_header	include/net/pkv.h	/^struct pkv_header {$/;"	s
pkv_serialize	lib/net/pkv.c	/^ssize_t pkv_serialize(struct pkv *p)$/;"	f
pool	include/net/connection.h	/^	struct threadpool pool;$/;"	m	struct:net_connection_handler	typeref:struct:net_connection_handler::threadpool
pool	include/threadpool.h	/^	struct threadpool *pool;$/;"	m	struct:ctrlthread	typeref:struct:ctrlthread::threadpool
pool	include/threadpool.h	/^	struct threadpool *pool;$/;"	m	struct:poolthread	typeref:struct:poolthread::threadpool
pool_change	include/threadpool.h	/^	pthread_cond_t pool_change;$/;"	m	struct:threadpool
pool_lock	include/threadpool.h	/^	pthread_mutex_t pool_lock;$/;"	m	struct:threadpool
pool_node	include/threadpool.h	/^	struct list_head pool_node;$/;"	m	struct:poolthread	typeref:struct:poolthread::list_head
pool_thread_count	include/threadpool.h	/^	volatile unsigned int pool_thread_count;$/;"	m	struct:threadpool
pool_threads	include/threadpool.h	/^	struct list_head pool_threads;$/;"	m	struct:threadpool	typeref:struct:threadpool::list_head
poolthread	include/threadpool.h	/^struct poolthread {$/;"	s
postcmdfuncs	src/prepost.c	/^int (*postcmdfuncs[])(struct appdata_priv *priv) = {$/;"	v
pprev	include/ll.h	/^	struct hlist_node *next, **pprev;$/;"	m	struct:hlist_node	typeref:struct:hlist_node::
precmdfuncs	src/prepost.c	/^int (*precmdfuncs[])(struct appdata_priv *priv) = {$/;"	v
prev	include/ll.h	/^	struct list_head *next, *prev;$/;"	m	struct:list_head	typeref:struct:list_head::
priv	include/cmds.h	/^	void *priv;$/;"	m	struct:cmd
priv	include/threadpool.h	/^	void *priv;$/;"	m	struct:ctrlthread
queue_lock	include/threadpool.h	/^	pthread_mutex_t queue_lock;$/;"	m	struct:threadpool
queue_wake	include/threadpool.h	/^	pthread_cond_t queue_wake;$/;"	m	struct:threadpool
registered_cmds	lib/cmds.c	/^LIST_HEAD(registered_cmds);$/;"	v
rows	include/math/matrix.h	/^	uint32_t rows;$/;"	m	struct:matrix_dt
run_cmd	lib/cmds.c	/^int run_cmd(const char *name, int argc, const char **argv, void *appdata)$/;"	f
run_cmd_line	lib/cmds.c	/^int run_cmd_line(const char *cmd_line, void *appdata)$/;"	f
run_cmds	lib/cmds.c	/^int run_cmds(int argc, const char **argv, void *appdata)$/;"	f
rx_data	include/net/connection.h	/^	void (*rx_data)(struct net_connection *c, size_t len);$/;"	m	struct:net_connection
rxb	include/net/connection.h	/^	} rxb;$/;"	m	struct:net_connection	typeref:struct:net_connection::__anon1
saved_tty_attrs	include/serial/serial.h	/^	struct termios saved_tty_attrs;$/;"	m	struct:serial_device	typeref:struct:serial_device::termios
scalar_mult_matrix_dt	lib/math/matrix.c	/^matrix_dt *scalar_mult_matrix_dt(const matrix_dt *A, double S)$/;"	f
sec	lib/threadpool.c	/^	unsigned int sec;$/;"	m	struct:test_work_data	file:
serial_close	lib/serial/serial.c	/^void serial_close(struct serial_device *dev)$/;"	f
serial_device	include/serial/serial.h	/^struct serial_device {$/;"	s
serial_device_chooser	lib/serial/device_chooser.c	/^int serial_device_chooser(char *devpath, size_t pathlen)$/;"	f
serial_device_list	lib/serial/serial.c	/^char **serial_device_list(void)$/;"	f
serial_flush	lib/serial/serial.c	/^void serial_flush(struct serial_device *dev)$/;"	f
serial_free_device_list	lib/serial/serial.c	/^void serial_free_device_list(char **device_paths)$/;"	f
serial_open	lib/serial/serial.c	/^struct serial_device *serial_open(const char *device_path, uint32_t baud,$/;"	f
serial_read	lib/serial/serial.c	/^ssize_t serial_read(struct serial_device *dev, void *buf, size_t len)$/;"	f
serial_write	lib/serial/serial.c	/^ssize_t serial_write(struct serial_device *dev, const void *buf, size_t len)$/;"	f
set_log_level	lib/logging.c	/^void set_log_level(int level)$/;"	f
shortopt	include/cmds.h	/^	char shortopt;		\/* \\0 for none *\/$/;"	m	struct:cmd_opt
shutdown	include/net/listen.h	/^	volatile int shutdown;$/;"	m	struct:net_listener
shutdown	include/threadpool.h	/^	volatile unsigned int shutdown;$/;"	m	struct:ctrlthread
shutdown	include/threadpool.h	/^	volatile unsigned int shutdown;$/;"	m	struct:threadpool
size	include/net/connection.h	/^		size_t size;$/;"	m	struct:net_connection::__anon1
sock	include/net/connection.h	/^	int sock;$/;"	m	struct:net_connection
sock	include/net/listen.h	/^	int sock;$/;"	m	struct:net_listener
sockaddr_addr_str	lib/net/util.c	/^char *sockaddr_addr_str(struct sockaddr *addr, char *str)$/;"	f
sockaddr_by_hostname	lib/net/util.c	/^int sockaddr_by_hostname(struct sockaddr *addr, socklen_t *addr_len,$/;"	f
sockaddr_port	lib/net/util.c	/^int sockaddr_port(struct sockaddr *addr)$/;"	f
summary	include/cmds.h	/^	const char *summary;$/;"	m	struct:cmd
test_connection	lib/net/connection.c	/^static struct net_connection test_connection;$/;"	v	typeref:struct:net_connection	file:
test_data	lib/threadpool.c	/^static struct test_work_data test_data[10];$/;"	v	typeref:struct:test_work_data	file:
test_disconnect_handler	lib/net/connection.c	/^static void test_disconnect_handler(struct net_connection *c)$/;"	f	file:
test_disconnect_handler	lib/net/listen.c	/^static void test_disconnect_handler(struct net_connection *c)$/;"	f	file:
test_handler	lib/net/connection.c	/^static struct net_connection_handler test_handler;$/;"	v	typeref:struct:net_connection_handler	file:
test_handler	lib/net/listen.c	/^static struct net_connection_handler test_handler;$/;"	v	typeref:struct:net_connection_handler	file:
test_listener	lib/net/listen.c	/^static struct net_listener test_listener;$/;"	v	typeref:struct:net_listener	file:
test_new_client_handler	lib/net/listen.c	/^static void test_new_client_handler(struct net_listener *l,$/;"	f	file:
test_rx_data_handler	lib/net/connection.c	/^static void test_rx_data_handler(struct net_connection *c, size_t len)$/;"	f	file:
test_rx_data_handler	lib/net/listen.c	/^static void test_rx_data_handler(struct net_connection *c, size_t len)$/;"	f	file:
test_work_data	lib/threadpool.c	/^struct test_work_data {$/;"	s	file:
test_work_func	lib/threadpool.c	/^static struct list_head *test_work_func(struct poolthread *thread,$/;"	f	file:
testpool	lib/threadpool.c	/^static struct threadpool testpool;$/;"	v	typeref:struct:threadpool	file:
thread	include/net/listen.h	/^	struct ctrlthread *thread;$/;"	m	struct:net_listener	typeref:struct:net_listener::ctrlthread
thread	include/threadpool.h	/^	pthread_t thread;$/;"	m	struct:ctrlthread
thread	include/threadpool.h	/^	pthread_t thread;$/;"	m	struct:poolthread
threadpool	include/threadpool.h	/^struct threadpool {$/;"	s
threadpool_init	lib/threadpool.c	/^int threadpool_init(struct threadpool *pool)$/;"	f
threadpool_is_work_done	lib/threadpool.c	/^int threadpool_is_work_done(struct threadpool *pool)$/;"	f
threadpool_queue_work	lib/threadpool.c	/^void threadpool_queue_work(struct threadpool *pool, struct list_head *work)$/;"	f
threadpool_shutdown	lib/threadpool.c	/^int threadpool_shutdown(struct threadpool *pool)$/;"	f
threadpool_start_control_thread	lib/threadpool.c	/^struct ctrlthread *threadpool_start_control_thread(struct threadpool *pool,$/;"	f
threadpool_start_new_thread	lib/threadpool.c	/^static void threadpool_start_new_thread(struct threadpool *pool)$/;"	f	file:
threadpool_thread	lib/threadpool.c	/^static void *threadpool_thread(struct poolthread *t)$/;"	f	file:
time_elapsed_us	lib/timelib.c	/^uint64_t time_elapsed_us(const struct timeval *start)$/;"	f
time_has_elapsed_us	lib/timelib.c	/^int time_has_elapsed_us(const struct timeval *start, uint64_t us)$/;"	f
tokenize_cmd_string	lib/cmds.c	/^static int tokenize_cmd_string(char *argstr, char **argv, size_t max_args)$/;"	f	file:
transpose_matrix_dt	lib/math/matrix.c	/^matrix_dt *transpose_matrix_dt(const matrix_dt *A)$/;"	f
type	include/net/pkv.h	/^	uint32_t type;$/;"	m	struct:pkv
type	include/net/pkv.h	/^	uint32_t type;$/;"	m	struct:pkv_header
values	include/math/matrix.h	/^	double values[];$/;"	m	struct:matrix_dt
version	include/net/pkv.h	/^	uint8_t version;$/;"	m	struct:pkv_header
voffset	include/dict.h	/^	uint32_t voffset;$/;"	m	struct:kvpair
work_count	include/threadpool.h	/^	volatile unsigned int work_count;$/;"	m	struct:threadpool
work_func	include/threadpool.h	/^		struct list_head *(*work_func)(struct poolthread *thread,$/;"	m	struct:threadpool::__anon2	typeref:struct:threadpool::__anon2::work_func
work_node	include/net/connection.h	/^	struct list_head work_node;$/;"	m	struct:net_connection	typeref:struct:net_connection::list_head
work_queue	include/threadpool.h	/^	struct list_head work_queue;$/;"	m	struct:threadpool	typeref:struct:threadpool::list_head
zero_matrix_dt	lib/math/matrix.c	/^void zero_matrix_dt(matrix_dt *A)$/;"	f
